<script src="https://apis.google.com/js/api.js"></script>
<script src="https://accounts.google.com/gsi/client" async defer></script>
<div class="mx-5 p-5 rounded border shadow bg-body">
  <%= form_with(model: note) do |form| %>
    <% if note.errors.any? %>
      <div id="error_explanation">
        <h2><%= pluralize(note.errors.count, "error") %> prohibited this note from being saved:</h2>

        <ul>
          <% note.errors.each do |error| %>
            <li><%= error.full_message %></li>
          <% end %>
        </ul>
      </div>
    <% end %>

    <div class="mb-3 field">
      <%= form.label :title, class:"form-label" %>
      <%= form.text_field :title, class:"form-control", autocomplete:"off"  %>
    </div>
    
    <div class="mb-3 field">
      <%= form.label :pdf, class:"form-label" %>
      <%= form.file_field :pdf,  multiple: true, class:"form-control", id: "pdf_id" %>
    </div>

    <%#<div class="field">%>
    <%#  <%= form.label :owner_id %>
    <%#  <%= form.text_field :owner_id %>
    <%#</div>%>
   
    <div class="mb-3 field">
      <%= form.label :google_drive_file, "Select File from Google Drive", class:"form-label" %>
      <div class="input-group">
        <input type="text" id="google_drive_file_name" class="form-control" placeholder="Select a file from Google Drive" readonly>
        <input type="button" class="input-group-text px-2" id="pick" value="Google Drive">
      </div>
      <%= form.hidden_field :google_drive_file_id, id: 'google_drive_file_id' %>
    </div>

    <div class="mb-3 field">
      <% @tags = "" %>
      <% note.tags.each do |tag| %>
        <% @tags += tag.name + "," %>
      <% end %>
      <% @tags = @tags[0...-1] %>
      <%= form.label :tag_names, "Tags", class:"form-label" %>
      <%= form.text_area :tag_names, class:"form-control fixed_textarea", autocomplete:"off", :rows => 3, placeholder: "Separa i tag con una virgola!", value: @tags %>
    </div>
     
    <div class="mb-3 form-group">
      <%= form.label :university_id, "Selezionare una università", class:"form-label" %>
      <% if note.university_id %>
        <% university_name = @universities.find(note.university_id).name %>
        <input type="text" class="form-control" placeholder="Università" list="list-university" id="input-datalist" value="<%= university_name %>">
      <% else %>
        <input type="text" class="form-control" placeholder="Università" list="list-university" id="input-datalist">
      <% end %>
      <datalist id="list-university">
        <% @universities.each do |university| %>
          <option value="<%= university.name %>" data-id="<%= university.id %>"></option>
        <% end %>
      </datalist>
      <%= form.hidden_field :university_id, id: 'university_id' %>
    </div>

    <div class="mb-3 field">
      <%= form.label :course_id, "Selezionare un corso", class:"form-label" %>
      <%= form.select :course_id, options_for_select(@courses.map { |c| [c.name, c.id] }, note.course_id), {},{required: 'true', autofocus: 'true', class: 'form-control', id: 'course_id'} %>
    </div>

    <div class="d-flex justify-content-between">
      <div class="mt-3 field">
        <%= form.check_box :visibility , class:"form-check-input shadow"%>
        <%= form.label :visibility, "Pubblica", class:"form-check-label" %>
      </div>

      <div class="d-flex">
        <div class="mt-3 field actions">
          <%= form.submit class: 'btn btn-dark'%>
        </div>

        <div class="mt-3 ms-1 field actions">
          <%= link_to 'Back', notes_path, class:"btn btn-danger" %>
        </div>
      </div>
    </div>
  <% end %>
</div>


<script>
console.log("CICCOIBELLO");
var init = false;
var GOOGLE_API_KEY = '<%= ENV['GOOGLE_API_KEY'] %>';

function initialize()
{
  if(init == false)
  {
    init = true;
    
    const inputDatalist = document.getElementById('input-datalist');
    const universityIdField = document.getElementById('university_id');
    const courseSelect = document.getElementById('course_id');

    inputDatalist.addEventListener('input', function() {
      const options = document.querySelectorAll('#list-university option');
      options.forEach(option => {
        if (option.value === inputDatalist.value) {
          universityIdField.value = option.getAttribute('data-id');
          updateCourseSelect(option.getAttribute('data-id'));
        }
      });
    });

    function updateCourseSelect(universityId) {
      if (universityId) {
        fetch(`/notes/courses_by_university?university_id=${universityId}`)
          .then(response => response.json())
          .then(data => {
            courseSelect.innerHTML = '<option value="">Seleziona un corso</option>';
            if (data.length > 0) {
              data.forEach(function(course) {
                const option = new Option(course.name, course.id);
                courseSelect.add(option);
              });
            } else {
              courseSelect.innerHTML += '<option value="">Nessun corso disponibile</option>';
            }
          });
      }
    }

    const pickButton = document.getElementById('pick');
    if (pickButton) {
      pickButton.addEventListener('click', handleAuthClick);
    }
  }
}

if(document.getElementById('input-datalist') && document.getElementById('university_id') && document.getElementById('course_id'))
{
  initialize();
}

document.addEventListener('DOMContentLoaded', function() {
  initialize();
});

// Authorization scopes required by the API; multiple scopes can be
  // included, separated by spaces.
  const SCOPES = 'https://www.googleapis.com/auth/drive.readonly';

  // TODO(developer): Set to client ID and API key from the Developer Console
  const CLIENT_ID = '322765432524-ghi51drs3inqtbnqvfjbb2qu36omnd9c.apps.googleusercontent.com';
  const API_KEY = 'AIzaSyCxn4CVoNa8AOWH_T3DMx5l4LDa69kfKuU';

  let tokenClient;
  let accessToken = null;
  let pickerInited = false;
  let gisInited = false;


  /**
   * Callback after api.js is loaded.
   */
  function gapiLoaded() {
    gapi.load('client:picker', initializePicker);
  }

  /**
   * Callback after the API client is loaded. Loads the
   * discovery doc to initialize the API.
   */
  async function initializePicker() {
    await gapi.client.load('https://www.googleapis.com/discovery/v1/apis/drive/v3/rest');
    pickerInited = true;
  }

  /**
   * Callback after Google Identity Services are loaded.
   */
  function gisLoaded() {
    tokenClient = google.accounts.oauth2.initTokenClient({
      client_id: CLIENT_ID,
      scope: SCOPES,
      callback: '', // defined later
    });
    gisInited = true;
  }

  /**
   *  Sign in the user upon button click.
   */
  function handleAuthClick() {
    tokenClient.callback = async (response) => {
      if (response.error !== undefined) {
        throw (response);
      }
      accessToken = response.access_token;
      await createPicker();
    };

    if (accessToken === null) {
      // Prompt the user to select a Google Account and ask for consent to share their data
      // when establishing a new session.
      tokenClient.requestAccessToken({prompt: 'consent'});
    } else {
      // Skip display of account chooser and consent dialog for an existing session.
      tokenClient.requestAccessToken({prompt: ''});
    }
  }

  /**
   *  Create and render a Picker object for searching images.
   */
  function createPicker() {
    const view = new google.picker.View(google.picker.ViewId.PDFS);
    view.setMimeTypes('application/pdf');
    const picker = new google.picker.PickerBuilder()
        .setDeveloperKey(API_KEY)
        .setOAuthToken(accessToken)
        .addView(view)
        .setCallback(pickerCallback)
        .build();
    picker.setVisible(true);
  }

  /**
   * Displays the file details of the user's selection.
   * @param {object} data - Containers the user selection from the picker
   */
  async function pickerCallback(data) {
    if (data.action === google.picker.Action.PICKED) {
      let text = `Picker response: \n${JSON.stringify(data, null, 2)}\n`;
      const doc = data[google.picker.Response.DOCUMENTS][0];
      const fileId = doc[google.picker.Document.ID];
      const fileName = doc[google.picker.Document.NAME];

      const { body } = await gapi.client.drive.files.get({ fileId, alt: 'media' });
      const blob = new Blob([new Uint8Array(body.length).map((_, i) => body.charCodeAt(i))])
      const file = new File([blob], fileName, { type: 'application/pdf' });

      const formData = new FormData();

      formData.append('file_content', blob, fileName); 
      formData.append('file_name', fileName);
      formData.append('file_id', fileId);
      formData.append('authenticity_token', '<%= form_authenticity_token %>');
      formData.append('access_token', accessToken);

      fetch('/google_drive/upload', {
        method: 'POST',
        body: formData
      })
      .then(response => response.json())
      .then(data => {
        console.log('File successfully uploaded:', data);
      })
      .catch(error => {
        console.error('Error uploading file:', error);
      });
      
      const dataTransfer = new DataTransfer();
      dataTransfer.items.add(file)
      document.getElementById('pdf_id').files = dataTransfer.files;
      document.getElementById('google_drive_file_name').value = fileName;
    }
  }
  
</script>
<script async defer src="https://apis.google.com/js/api.js" onload="gapiLoaded()"></script>
<script async defer src="https://accounts.google.com/gsi/client" onload="gisLoaded()"></script>


